// stylelint-disable property-blacklist
// Single side border-radius
@import "./style.scss";

// Helper function to replace negative values with 0
@mixin button-outline-variant($color,
  $color-hover: color-contrast($color),
  $active-background: $color,
  $active-border: $color,
  $active-color: color-contrast($active-background)) {
  color: $color;

}

@function valid-radius($radius) {
  $return: ();

  @each $value in $radius {
    @if type-of($value)==number {
      $return: append($return, max($value, 0));
    }

    @else {
      $return: append($return, $value);
    }
  }

  @return $return;
}

@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
  @if $enable-rounded {
    border-radius: valid-radius($radius);
    
  }
 
  @else if $fallback-border-radius !=false {
    border-radius: $fallback-border-radius;
  }
}

@mixin border-top-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-top-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
  }
}

@mixin border-top-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-right-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-left-radius($radius) {
  @if $enable-rounded {
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
  padding: $padding-y $padding-x;

  font-size: $font-size;


  // Manually declare to provide an override to the browser default
  @include border-radius($border-radius, 0);
}

@mixin font-size($value) {
  @include rfs($value);
}

@mixin rfs($values, $property: font-size) {
  @if $values !=null {
    $val: $values;
    $fluidVal: rfs-fluid-value($values);

    // Do not print the media query if responsive & non-responsive values are the same
    #{$property}: $val;
  }
}

@mixin box-shadow($shadow...) {
  @if $enable-shadows {
    $result: ();

    @if (length($shadow)==1) {
      // We can pass `@include box-shadow(none);`
      $result: $shadow;
    }

    @else {

      // Filter to avoid invalid properties for example `box-shadow: none, 1px 1px black;`
      @for $i from 1 through length($shadow) {
        @if nth($shadow, $i) !="none" {
          $result: append($result, nth($shadow, $i), "comma");
        }
      }
    }

    @if (length($result) > 0) {
      box-shadow: $result;
    }
  }
}

@mixin transition($transition...) {
  @if length($transition)==0 {
    $transition: $transition-base;
  }

  @if length($transition)>1 {
    @each $value in $transition {
      @if $value==null or $value==none {
        @warn "The keyword 'none' or 'null' must be used as a single argument.";
      }
    }
  }

  @if $enable-transitions {
    @if nth($transition, 1) !=null {
      transition: $transition;
    }

    @if $enable-reduced-motion and nth($transition, 1) !=null and nth($transition, 1) !=none {
      @media (prefers-reduced-motion: reduce) {
        transition: none;
      }
    }
  }
}



.nan-btn {
  display: inline-block;
  color: $body-color;
  text-align: center;
  // text-decoration: if($link-decoration==none, null, none);
  // white-space: $btn-white-space;
  vertical-align: middle;
  cursor: if($enable-button-pointers, pointer, null);
  user-select: none;
  background-color: transparent;
  border: $btn-border-width solid transparent;

  &+& {
    margin-left: 10px;
  }

  @include button-size($btn-padding-y, $btn-padding-x, $btn-font-size, $btn-border-radius);
  // @include transition($btn-transition);
  @include transition($btn-transition);

  &:hover {
    color: $body-color;
    text-decoration: if($link-hover-decoration==underline, none, null);
  }

  .nan-btn-check:focus+&,
  &:focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;

  }
  &.is-click:active{
    // perspective: 5000;
    transform:translateY(1px);opacity:1}
  &.is-button-click-slidable:active{opacity:1}
  .nan-btn-check:checked+&,
  .nan-btn-check:active+&,
  &:active,
  &.active {
    @include box-shadow($btn-active-box-shadow);

    &:focus {
      @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
    }
  }

  &:disabled,
  &.disabled,
  fieldset:disabled & {
    // pointer-events: none;
    cursor: not-allowed;
    opacity: $btn-disabled-opacity;
    @include box-shadow(none);
  }


}




@mixin gradient-bg($color: null) {
  background-color: $color;

  @if $enable-gradients {
    background-image: var(--bs-gradient);
  }
}

$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

@function color-contrast($background, $color-contrast-dark: $color-contrast-dark, $color-contrast-light: $color-contrast-light, $min-contrast-ratio: $min-contrast-ratio) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $black;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);

    @if $contrast-ratio>$min-contrast-ratio {
      @return $color;
    }

    @else if $contrast-ratio>$max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
  }

  // @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}â€¦";

  @return $max-ratio-color;
}

@function opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100);
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));
  @return if($l1 > $l2, ($l1 + .05) / ($l2 + .25), ($l2 + .05) / ($l1 + .05));
}

// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
  $rgb: ("r": red($color),
      "g": green($color),
      "b": blue($color));

  @each $name,
  $value in $rgb {
    $value: if($value / 255 < .03928, $value / 255 / 12.92, nth($_luminance-list, $value + 1));
    $rgb: map-merge($rgb, ($name: $value));
  }

  @return (map-get($rgb, "r") * .2126)+(map-get($rgb, "g") * .7152)+(map-get($rgb, "b") * .0722);
}

@mixin button-variant($background,
  $border,
  $color: color-contrast($background),
  $hover-background: darken($background, 7.5%),
  $hover-border: darken($border, 10%),
  $hover-color: color-contrast($background),
  $active-background: darken($background, 10%),
  $active-border: darken($border, 12.5%),
  $active-color: color-contrast($active-background),
  $disabled-background: $background,
  $disabled-border: $border,
  $disabled-color: color-contrast($disabled-background)) {


  color: $color;
  @include gradient-bg($background);



  &:hover {
    color: $color;
    @include gradient-bg($hover-background);
    text-decoration: if($link-hover-decoration==underline, none, null);
  }

  &:focus {
    color: $hover-color;
    @include gradient-bg($hover-background);
    border-color: $hover-border;

    @if $enable-shadows {
      @include box-shadow($btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5));
    }

    @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5);
    }
  }

  &:active {
    color: $active-color;
    background-color: $active-background;
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
    border-color: $active-border;
  }

  & [class*="nan-icon"] {
    &+span {
      margin-left: 5px;
    }
  }

  &.is-round {
    border-radius: 20px;
  }

  &.is-circle {
    width: 40px !important;
    height: 40px !important;
    padding: 0 !important;
    border-radius: 50%;
    padding: 12px;
    line-height: 1;
  }

}

@mixin button-outline-variant($color,
  $color-hover: color-contrast($color),
  $active-background: $color,
  $active-border: $color,
  $active-color: color-contrast($active-background)) {
  color: $color;

  @if($color==#f8f9fa) {
    color: $dark;
  }

  border-color: $color;

  &:hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }

  .nan-btn-check:focus+&,
  &:focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
  }

  .nan-btn-check:checked+&,
  .nan-btn-check:active+&,
  &:active,
  &.active,
  &.dropdown-toggle.show {
    color: $active-color;
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      @if $enable-shadows {
        @include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5));
      }

      @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }

  & [class*="nan-icon"] {
    &+span {
      margin-left: 5px;
    }
  }

  &.is-round {
    border-radius: 20px;
  }

  &.is-circle {
    width: 40px !important;
    height: 40px !important;
    padding: 0 !important;
    border-radius: 50%;
    // padding: 11px;
    padding: 12px;
    line-height: 1;
  }

  &:disabled,
  &.disabled {
    color: $color;
    cursor: not-allowed;
    background-color: transparent;
  }
}


@each $color,
$value in $theme-colors {
  .nan-btn-#{$color} {
    @include button-variant($value, $value);
  }
}

@each $color,
$value in $theme-colors {
  .nan-btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}


.nan-btn-large {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-border-radius-lg);
}

.nan-btn-medium {
  @include button-size($btn-padding-y-medium, $btn-padding-x-medium, $btn-font-size-medium, $btn-border-radius-medium);
}


.nan-btn-small {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-border-radius-sm);
}

.nan-button-group {
  display: inline-flex;
  vertical-align: middle;

  & > .nan-btn {
    float: left;
    position: relative;

    & + .nan-btn {
      margin-left: 0;
    }
  }
}
.nan-btn-cyberpunk{
  position: relative;
  padding: 0.95rem 2.75rem;
  &::before {
    left: 2px;
    background: hsl(180, 100%, 50%, 50%);
  }

  &::after {
    background: hsl(0deg, 100%, 60%);
  }

}

.nan-btn-cyberpunk::after,
    .nan-btn-cyberpunk::before,
    .glitch {
      content: "";
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      clip-path: polygon(0 0,
          100% 0,
          100% 100%,
          calc(100% - 25px) 100%,
          calc(100% - 25px) calc(100% - 10px),
          calc(100% - 55px) calc(100% - 10px),
          calc(100% - 55px) 100%,
          20px 100%,
          0 calc(100% - 20px));
              .button::before {
      left: 2px;
      background: hsl(180, 100%, 50%, 50%);
    }

    .button::after {
      background: hsl(0deg, 100%, 60%);
    }

    }


    .glitch {
      background: hsl(0deg, 100%, 60%);
      box-shadow: 0 0 0 1px hsl(180, 100%, 50%) inset;
      z-index: 10;
      opacity: 0;
    }

    .text {
      font-size: 24px;
      font-weight: 800;
      color: white;
      position: relative;
      z-index: 15;
    }

    .text::before {
      content: attr(data-text);
      position: absolute;
      display: block;
      top: 0;
      left: 0;
      text-shadow: 1px 1px hsl(180, 100%, 50%),
        -1px -2px hsl(50deg, 100%, 60%);
      opacity: 0;
    }

    .nan-btn-cyberpunk:hover .glitch,
    .nan-btn-cyberpunk:hover .text::before {
      animation: glitch-effect 2s infinite;
      opacity: 1;
    }

    .platform {
      position: absolute;
      right: 28px;
      bottom: -4px;
      font-size: 10px;
      letter-spacing: 1px;
      font-weight: 500;
    }

    @keyframes glitch-effect {
      0% {
        clip-path: polygon(0 0, 100% 0, 100% 2%, 0 2%);
      }

      5% {
        clip-path: polygon(0 8%, 100% 8%, 100% 16%, 0 16%);
      }

      10% {
        clip-path: polygon(0 80%, 100% 80%, 100% 88%, 0 88%);
        transform: translate3d(-5px, 0, 0);
      }

      15% {
        clip-path: polygon(0 80%, 100% 80%, 100% 88%, 0 88%);
        transform: translate3d(5px, 0, 0);
      }

      16% {
        clip-path: polygon(0 80%, 100% 80%, 100% 88%, 0 88%);
        transform: translate3d(5px, 0, 0);
      }

      17% {
        clip-path: polygon(0 90%, 100% 90%, 100% 100%, 0 100%);
        transform: translate3d(5px, 0, 0);
      }

      18% {
        clip-path: polygon(0 0, 0 0, 0 0, 0 0);
      }

      20% {
        clip-path: polygon(0 30%, 100% 30%, 100% 65%, 0 65%);
      }

      25% {
        clip-path: polygon(0 30%, 100% 30%, 100% 65%, 0 65%);
        transform: translate3d(-5px, 0, 0);
      }

      28% {
        clip-path: polygon(0 30%, 100% 30%, 100% 65%, 0 65%);
        transform: translate3d(-5px, 0, 0);
      }

      29% {
        clip-path: polygon(0 30%, 100% 30%, 100% 65%, 0 65%);
        transform: translate3d(5px, 0, 0);
      }

      30% {
        clip-path: polygon(0 75%, 100% 75%, 100% 100%, 0 100%);
      }

      40% {
        clip-path: polygon(0 45%, 100% 45%, 100% 60%, 0 60%);
      }

      42% {
        clip-path: polygon(0 45%, 100% 45%, 100% 60%, 0 60%);
        transform: translate3d(-5px, 0, 0);
      }

      45% {
        clip-path: polygon(0 45%, 100% 45%, 100% 60%, 0 60%);
        transform: translate3d(5px, 0, 0);
      }

      48% {
        clip-path: polygon(0 45%, 100% 45%, 100% 60%, 0 60%);
        transform: translate3d(-5px, 0, 0);
      }

      50% {
        clip-path: polygon(0 0, 0 0, 0 0, 0 0);
      }

      60% {
        clip-path: polygon(0 100%, 100% 100%, 100% 100%, 0 100%);
      }

      100% {
        clip-path: polygon(0 100%, 100% 100%, 100% 100%, 0 100%);
        transform: translate3d(0, 0, 0);
      }
    }